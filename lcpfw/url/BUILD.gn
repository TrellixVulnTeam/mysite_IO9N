# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/buildflag_header.gni")
#import("//testing/libfuzzer/fuzzer_test.gni")
#import("//testing/test.gni")
import("features.gni")

if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/rules.gni")
}

buildflag_header("buildflags") {
  header = "buildflags.h"
  flags = [ "USE_PLATFORM_ICU_ALTERNATIVES=$use_platform_icu_alternatives" ]
}

component("url") {
  sources = [
    "gurl.cc",
    "gurl.h",
    "origin.cc",
    "origin.h",
    "scheme_host_port.cc",
    "scheme_host_port.h",
    "third_party/mozilla/url_parse.cc",
    "third_party/mozilla/url_parse.h",
    "url_canon.cc",
    "url_canon.h",
    "url_canon_etc.cc",
    "url_canon_filesystemurl.cc",
    "url_canon_fileurl.cc",
    "url_canon_host.cc",
    "url_canon_internal.cc",
    "url_canon_internal.h",
    "url_canon_internal_file.h",
    "url_canon_ip.cc",
    "url_canon_ip.h",
    "url_canon_mailtourl.cc",
    "url_canon_path.cc",
    "url_canon_pathurl.cc",
    "url_canon_query.cc",
    "url_canon_relative.cc",
    "url_canon_stdstring.cc",
    "url_canon_stdstring.h",
    "url_canon_stdurl.cc",
    "url_constants.cc",
    "url_constants.h",
    "url_file.h",
    "url_parse_file.cc",
    "url_parse_internal.h",
    "url_util.cc",
    "url_util.h",
    "url_util_internal.h",
  ]

  defines = [ "IS_URL_IMPL" ]

  deps = [
    "//base",
    "//base/third_party/dynamic_annotations",
    #"//ipc:param_traits",
  ]

  cflags = []
  if (is_win && !is_clang) {
    cflags += [
      "/wd4003",  # 类函数宏的调用“COMPONENT_MACRO_SELECT_THIRD_ARGUMENT_IMPL_”参数不足
    ]
  }

  if (is_win) {
    # Don't conflict with Windows' "url.dll".
    output_name = "url_lib"
  }

  # ICU support.
  if (use_platform_icu_alternatives) {
    if (is_android) {
      sources += [ "url_idna_icu_alternatives_android.cc" ]
      deps += [
        ":buildflags",
        ":url_java",
        ":url_jni_headers",
        "//base",
        "//base/third_party/dynamic_annotations",
      ]
    } else if (is_ios) {
      sources += [ "url_idna_icu_alternatives_ios.mm" ]
    } else {
      assert(false,
             "ICU alternative is not implemented for platform: " + target_os)
    }
  } else {
    # Use ICU.
    sources += [
      "url_canon_icu.cc",
      "url_canon_icu.h",
      "url_idna_icu.cc",
    ]
    deps += [
      "//base:i18n",
      "//third_party/icu",
    ]
  }
}

if (is_android) {
  source_set("gurl_android") {
    sources = [
      "android/gurl_android.cc",
      "android/gurl_android.h",
      "android/parsed_android.cc",
      "android/parsed_android.h",
    ]

    deps = [
      ":gurl_jni_headers",
      ":url",
      "//base:base",
    ]
  }

  static_library("origin_android") {
    sources = [ "android/origin_android.cc" ]

    deps = [
      ":url",
      ":url_jni_headers",
      "//base",
      "//url/mojom:url_mojom_origin",
    ]
  }

  android_library("url_java") {
    sources = [ "android/java/src/org/chromium/url/IDNStringUtil.java" ]
    deps = [ "//base:base_java" ]
  }

  android_library("gurl_java") {
    sources = [
      "android/java/src/org/chromium/url/GURL.java",
      "android/java/src/org/chromium/url/Parsed.java",
      "android/java/src/org/chromium/url/URI.java",
    ]
    deps = [
      "//base:base_java",
      "//base:jni_java",
      "//third_party/androidx:androidx_annotation_annotation_java",
    ]
    annotation_processor_deps = [ "//base/android/jni_generator:jni_processor" ]
  }

  android_library("origin_java") {
    sources = [ "android/java/src/org/chromium/url/Origin.java" ]
    deps = [
      "//base:base_java",
      "//mojo/public/java:bindings_java",
      "//mojo/public/mojom/base:base_java",
      "//url/mojom:url_mojom_origin_java",
    ]
  }

  generate_jni("url_jni_headers") {
    sources = [
      "android/java/src/org/chromium/url/IDNStringUtil.java",
      "android/java/src/org/chromium/url/Origin.java",
    ]
  }

  generate_jni("gurl_jni_headers") {
    sources = [
      "android/java/src/org/chromium/url/GURL.java",
      "android/java/src/org/chromium/url/Parsed.java",
    ]
  }
}
