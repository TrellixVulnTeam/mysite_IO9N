void testTimeout()
{
    auto beg = base::Time::Now();
    // 对各采样出现次数进行累计，输出当前作用域的执行耗时，毫秒为单位
    SCOPED_UMA_HISTOGRAM_TIMER("testTimeout().FunctionTime");
    Sleep(1000);
    SCOPED_UMA_HISTOGRAM_TIMER("testTimeout().FunctionTime");

    static int i = 0;
    printf("testTimeout: %d\n", ++i);

    // test
    //lcpfw::PostDelayedTask(FROM_HERE, base::BindOnce(testTimeout), base::TimeDelta::FromSeconds(1));

    // 对各采样出现次数进行累计，可得各采样值在总采样中的占比分布，可得所有采样值的平均值
    UMA_HISTOGRAM_BOOLEAN("Histogram.Bool", true);
    UMA_HISTOGRAM_BOOLEAN("Histogram.Bool", true);
    UMA_HISTOGRAM_BOOLEAN("Histogram.Bool", false);

    // 对各采样出现次数进行累计，可得各采样值在总采样中的占比分布。同样的label以第一次记录设定的最大值为阈值，后续采样指定新的最大值的调用不予记录。
    UMA_HISTOGRAM_EXACT_LINEAR("Histogram.Linear", 2, 10);  // 以第一次记录给定的10为该label的max阈值
    UMA_HISTOGRAM_EXACT_LINEAR("Histogram.Linear", 3, 20);  // 重新指定max阈值，该采样信息无效，不会被记录
    UMA_HISTOGRAM_EXACT_LINEAR("Histogram.Linear", 1, 10);
    UMA_HISTOGRAM_EXACT_LINEAR("Histogram.Linear", 19, 10);  // 采样值超过max阈值，按max阈值记录

    // 对各采样出现次数进行累计，可得各采样的在总采样中的总占比，采样范围定死为0~101，超过阈值的按阈值处理
    UMA_HISTOGRAM_PERCENTAGE("Histogram.Percent", 22);
    UMA_HISTOGRAM_PERCENTAGE("Histogram.Percent", 22);
    UMA_HISTOGRAM_PERCENTAGE("Histogram.Percent", 33);
    UMA_HISTOGRAM_PERCENTAGE("Histogram.Percent", 100);
    UMA_HISTOGRAM_PERCENTAGE("Histogram.Percent", 110);

    // 3KB=131072
    // 指定采样值，同时指定这个采样值发生的次数；限定采样值的最大阈值（超出阈值的采样值按阈值算）；指定一个除数，实际记录的采样数是传入的采样数和这个除数的商。
    UMA_HISTOGRAM_SCALED_EXACT_LINEAR("FooKiB", 1, 131072, 2, 1024);
    UMA_HISTOGRAM_SCALED_EXACT_LINEAR("FooKiB", 2, 131072, 2, 1024);
    UMA_HISTOGRAM_SCALED_EXACT_LINEAR("FooKiB", 33, 131072, 2, 1024);   // 实际采样值33超过设定的max阈值2，该采样信息将按采样值2进行记录

    // 对各采样出现次数进行累计，可得各采样的在总采样中的总占比，采样范围定死为100
    UMA_HISTOGRAM_COUNTS_100("My.Histogram", 22);
    UMA_HISTOGRAM_COUNTS_100("My.Histogram", 22);
    UMA_HISTOGRAM_COUNTS_100("My.Histogram", 33);

    // 对各采样出现次数进行累计，可得各采样值在总采样中的占比分布，可得所有采样值的平均值。输出的采样值单位为毫秒
    UMA_HISTOGRAM_TIMES("My.Timing.Histogram", base::TimeDelta::FromSeconds(1));
    UMA_HISTOGRAM_TIMES("My.Timing.Histogram", base::TimeDelta::FromMicroseconds(2000000));
    UMA_HISTOGRAM_TIMES("My.Timing.Histogram", base::TimeDelta::FromSeconds(3));
    UMA_HISTOGRAM_TIMES("My.Timing.Histogram", base::TimeDelta::FromSeconds(3));

    // 对各采样出现次数进行累计，可得各采样值在总采样中的占比分布，采样范围定死为1000~500000，可得所有采样值的平均值。输出的采样值单位为KB
    UMA_HISTOGRAM_MEMORY_KB("My.Memory.Histogram", 200);    // 小于min阈值的，按min阈值对待并记录
    UMA_HISTOGRAM_MEMORY_KB("My.Memory.Histogram", 1000);
    UMA_HISTOGRAM_MEMORY_KB("My.Memory.Histogram", 2200);
    UMA_HISTOGRAM_MEMORY_KB("My.Memory.Histogram", 2200);
    UMA_HISTOGRAM_MEMORY_KB("My.Memory.Histogram", 3300);


    auto del = base::Time::Now() - beg;
    LOG(INFO) << "testTimeout() coast: " << del.InMilliseconds();
}



// VLOG日志输出
// 采样数据范围展示为左闭右开
[16132:0515/113822.083:VERBOSE1:statistics_recorder.cc(430)] Collections of all histograms
Histogram: LibraryLoader.LoadNativeLibraryWindows recorded 1 samples, mean = 5.0 (flags = 0x1)
0  ... 
5  -O                                                                        (1 = 100.0%) {0.0%}    // [0,5)，采样值是LoadLibraryResult::SUCCEED=0
6  O                                                                         (0 = 0.0%) {100.0%}

Histogram: FooKiB recorded 384 samples, mean = 1.7 (flags = 0x1)
0  O                                                                         (0 = 0.0%)
1  ------------------------------------O                                     (128 = 33.3%) {0.0%}
2  ------------------------------------------------------------------------O (256 = 66.7%) {33.3%}

Histogram: Histogram.Bool recorded 3 samples, mean = 0.7 (flags = 0x1)
0  -O                                                                        (1 = 33.3%)
1  --O                                                                       (2 = 66.7%) {33.3%}
2  O                                                                         (0 = 0.0%) {100.0%}

Histogram: Histogram.Linear recorded 3 samples, mean = 7.3 (flags = 0x1)
0   O                                                                         (0 = 0.0%)
1   -O                                                                        (1 = 33.3%) {0.0%}    // [1,2)的有一个
2   -O                                                                        (1 = 33.3%) {33.3%}   // [2,3)的有一个
3   ... 
10  -O                                                                        (1 = 33.3%) {66.7%}   // [10,∞)的有一个

Histogram: Histogram.MismatchedConstructionArguments recorded 1 samples (flags = 0x1)
2023957760  -O                                                                        (1 = 100.0%)

Histogram: Histogram.Percent recorded 5 samples, mean = 57.4 (flags = 0x1)
0    ... 
22   --O                                                                       (2 = 40.0%) {0.0%}
23   ... 
33   -O                                                                        (1 = 20.0%) {40.0%}
34   ... 
100  -O                                                                        (1 = 20.0%) {60.0%}
101  -O                                                                        (1 = 20.0%) {80.0%}

Histogram: My.Histogram recorded 3 samples, mean = 25.7 (flags = 0x1)
0   ... 
22  --O                                                                       (2 = 66.7%) {0.0%}
23  ... 
32  -O                                                                        (1 = 33.3%) {66.7%}
34  ... 

Histogram: My.Memory.Histogram recorded 5 samples, mean = 1780.0 (flags = 0x1)
0     -O                                                                        (1 = 20.0%)
1000  -O                                                                        (1 = 20.0%) {20.0%}
1138  ... 
2174  --O                                                                       (2 = 40.0%) {40.0%}
2475  ... 
3206  -O                                                                        (1 = 20.0%) {80.0%}
3649  ... 

Histogram: My.Timing.Histogram recorded 4 samples, mean = 2250.0 (flags = 0x1)
0     ... 
894   -O                                                                        (1 = 25.0%) {0.0%}
1062  ... 
1782  -O                                                                        (1 = 25.0%) {25.0%}
2117  ... 
2990  --O                                                                       (2 = 50.0%) {50.0%}
3553  ... 

Histogram: ThreadPool.NumTasksBeforeDetach.app_task_env_thread_pool.Background recorded 0 samples (flags = 0x1)
0 ... 

Histogram: ThreadPool.NumTasksBeforeDetach.app_task_env_thread_pool.Foreground recorded 0 samples (flags = 0x1)
0 ... 

Histogram: testTimeout().FunctionTime recorded 2 samples, mean = 2248.0 (flags = 0x1)
0     ... 
57    -O                                                                        (1 = 50.0%) {0.0%}
68    ... 
4222  -O                                                                        (1 = 50.0%) {50.0%}
5017  ... 




// base::StatisticsRecorder::ToJSON（base::JSON_VERBOSITY_LEVEL_FULL） 输出
{
    "histograms": [
        {
            "buckets": [
                {
                    "count": 128,
                    "high": 2,
                    "low": 1
                },
                {
                    "count": 256,
                    "high": 2147483647,
                    "low": 2
                }
            ],
            "count": 384,
            "flags": 1,
            "name": "FooKiB",
            "params": {
                "bucket_count": 3,
                "max": 2,
                "min": 1,
                "type": "LINEAR_HISTOGRAM"
            },
            "pid": 5980,
            "sum": 640.0
        },
        {
            "buckets": [
                {
                    "count": 1,
                    "high": 1,
                    "low": 0
                },
                {
                    "count": 2,
                    "high": 2,
                    "low": 1
                }
            ],
            "count": 3,
            "flags": 1,
            "name": "Histogram.Bool",
            "params": {
                "bucket_count": 3,
                "max": 2,
                "min": 1,
                "type": "BOOLEAN_HISTOGRAM"
            },
            "pid": 5980,
            "sum": 2.0
        },
        {
            "buckets": [
                {
                    "count": 1,
                    "high": 2,
                    "low": 1
                },
                {
                    "count": 1,
                    "high": 3,
                    "low": 2
                },
                {
                    "count": 1,
                    "high": 2147483647,
                    "low": 10
                }
            ],
            "count": 3,
            "flags": 1,
            "name": "Histogram.Linear",
            "params": {
                "bucket_count": 11,
                "max": 10,
                "min": 1,
                "type": "LINEAR_HISTOGRAM"
            },
            "pid": 5980,
            "sum": 22.0
        },
        {
            "buckets": [
                {
                    "count": 1,
                    "high": 2023957761,
                    "low": 2023957760
                }
            ],
            "count": 1,
            "flags": 1,
            "name": "Histogram.MismatchedConstructionArguments",
            "params": {
                "type": "SPARSE_HISTOGRAM"
            },
            "pid": 5980,
            "sum": 2023957760.0
        },
        {
            "buckets": [
                {
                    "count": 2,
                    "high": 23,
                    "low": 22
                },
                {
                    "count": 1,
                    "high": 34,
                    "low": 33
                },
                {
                    "count": 1,
                    "high": 101,
                    "low": 100
                },
                {
                    "count": 1,
                    "high": 2147483647,
                    "low": 101
                }
            ],
            "count": 5,
            "flags": 1,
            "name": "Histogram.Percent",
            "params": {
                "bucket_count": 102,
                "max": 101,
                "min": 1,
                "type": "LINEAR_HISTOGRAM"
            },
            "pid": 5980,
            "sum": 287.0
        },
        {
            "buckets": [
                {
                    "count": 2,
                    "high": 23,
                    "low": 22
                },
                {
                    "count": 1,
                    "high": 34,
                    "low": 32
                }
            ],
            "count": 3,
            "flags": 1,
            "name": "My.Histogram",
            "params": {
                "bucket_count": 50,
                "max": 100,
                "min": 1,
                "type": "HISTOGRAM"
            },
            "pid": 5980,
            "sum": 77.0
        },
        {
            "buckets": [
                {
                    "count": 1,
                    "high": 1000,
                    "low": 0
                },
                {
                    "count": 1,
                    "high": 1138,
                    "low": 1000
                },
                {
                    "count": 2,
                    "high": 2475,
                    "low": 2174
                },
                {
                    "count": 1,
                    "high": 3649,
                    "low": 3206
                }
            ],
            "count": 5,
            "flags": 1,
            "name": "My.Memory.Histogram",
            "params": {
                "bucket_count": 50,
                "max": 500000,
                "min": 1000,
                "type": "HISTOGRAM"
            },
            "pid": 5980,
            "sum": 8900.0
        },
        {
            "buckets": [
                {
                    "count": 1,
                    "high": 1062,
                    "low": 894
                },
                {
                    "count": 1,
                    "high": 2117,
                    "low": 1782
                },
                {
                    "count": 2,
                    "high": 3553,
                    "low": 2990
                }
            ],
            "count": 4,
            "flags": 1,
            "name": "My.Timing.Histogram",
            "params": {
                "bucket_count": 50,
                "max": 10000,
                "min": 1,
                "type": "HISTOGRAM"
            },
            "pid": 5980,
            "sum": 9000.0
        },
        {
            "buckets": [],
            "count": 0,
            "flags": 1,
            "name": "ThreadPool.NumTasksBeforeDetach.app_task_env_thread_pool.Background",
            "params": {
                "bucket_count": 50,
                "max": 1000,
                "min": 1,
                "type": "HISTOGRAM"
            },
            "pid": 5980,
            "sum": 0.0
        },
        {
            "buckets": [],
            "count": 0,
            "flags": 1,
            "name": "ThreadPool.NumTasksBeforeDetach.app_task_env_thread_pool.Foreground",
            "params": {
                "bucket_count": 50,
                "max": 1000,
                "min": 1,
                "type": "HISTOGRAM"
            },
            "pid": 5980,
            "sum": 0.0
        },
        {
            "buckets": [
                {
                    "count": 1,
                    "high": 114,
                    "low": 96
                },
                {
                    "count": 1,
                    "high": 1262,
                    "low": 1062
                }
            ],
            "count": 2,
            "flags": 1,
            "name": "testTimeout().FunctionTime",
            "params": {
                "bucket_count": 50,
                "max": 10000,
                "min": 1,
                "type": "HISTOGRAM"
            },
            "pid": 5980,
            "sum": 1228.0
        }
    ]
}



// base::StatisticsRecorder::ToJSON（base::JSON_VERBOSITY_LEVEL_OMIT_BUCKETS 输出
{
    "histograms": [
        {
            "count": 384,
            "flags": 1,
            "name": "FooKiB",
            "params": {
                "bucket_count": 3,
                "max": 2,
                "min": 1,
                "type": "LINEAR_HISTOGRAM"
            },
            "pid": 5980,
            "sum": 640.0
        },
        {
            "count": 3,
            "flags": 1,
            "name": "Histogram.Bool",
            "params": {
                "bucket_count": 3,
                "max": 2,
                "min": 1,
                "type": "BOOLEAN_HISTOGRAM"
            },
            "pid": 5980,
            "sum": 2.0
        },
        {
            "count": 3,
            "flags": 1,
            "name": "Histogram.Linear",
            "params": {
                "bucket_count": 11,
                "max": 10,
                "min": 1,
                "type": "LINEAR_HISTOGRAM"
            },
            "pid": 5980,
            "sum": 22.0
        },
        {
            "count": 1,
            "flags": 1,
            "name": "Histogram.MismatchedConstructionArguments",
            "params": {
                "type": "SPARSE_HISTOGRAM"
            },
            "pid": 5980,
            "sum": 2023957760.0
        },
        {
            "count": 5,
            "flags": 1,
            "name": "Histogram.Percent",
            "params": {
                "bucket_count": 102,
                "max": 101,
                "min": 1,
                "type": "LINEAR_HISTOGRAM"
            },
            "pid": 5980,
            "sum": 287.0
        },
        {
            "count": 3,
            "flags": 1,
            "name": "My.Histogram",
            "params": {
                "bucket_count": 50,
                "max": 100,
                "min": 1,
                "type": "HISTOGRAM"
            },
            "pid": 5980,
            "sum": 77.0
        },
        {
            "count": 5,
            "flags": 1,
            "name": "My.Memory.Histogram",
            "params": {
                "bucket_count": 50,
                "max": 500000,
                "min": 1000,
                "type": "HISTOGRAM"
            },
            "pid": 5980,
            "sum": 8900.0
        },
        {
            "count": 4,
            "flags": 1,
            "name": "My.Timing.Histogram",
            "params": {
                "bucket_count": 50,
                "max": 10000,
                "min": 1,
                "type": "HISTOGRAM"
            },
            "pid": 5980,
            "sum": 9000.0
        },
        {
            "count": 0,
            "flags": 1,
            "name": "ThreadPool.NumTasksBeforeDetach.app_task_env_thread_pool.Background",
            "params": {
                "bucket_count": 50,
                "max": 1000,
                "min": 1,
                "type": "HISTOGRAM"
            },
            "pid": 5980,
            "sum": 0.0
        },
        {
            "count": 0,
            "flags": 1,
            "name": "ThreadPool.NumTasksBeforeDetach.app_task_env_thread_pool.Foreground",
            "params": {
                "bucket_count": 50,
                "max": 1000,
                "min": 1,
                "type": "HISTOGRAM"
            },
            "pid": 5980,
            "sum": 0.0
        },
        {
            "count": 2,
            "flags": 1,
            "name": "testTimeout().FunctionTime",
            "params": {
                "bucket_count": 50,
                "max": 10000,
                "min": 1,
                "type": "HISTOGRAM"
            },
            "pid": 5980,
            "sum": 1228.0
        }
    ]
}