# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/ui.gni")
import("//testing/test.gni")

component("aura") {
  public = [
    "client/aura_constants.h",
    "client/capture_client.h",
    "client/capture_client_observer.h",
    "client/capture_delegate.h",
    "client/cursor_client.h",
    "client/cursor_client_observer.h",
    "client/default_capture_client.h",
    "client/drag_drop_client.h",
    "client/drag_drop_client_observer.h",
    "client/drag_drop_delegate.h",
    "client/event_client.h",
    "client/focus_change_observer.h",
    "client/focus_client.h",
    "client/screen_position_client.h",
    "client/transient_window_client.h",
    "client/transient_window_client_observer.h",
    "client/visibility_client.h",
    "client/window_parenting_client.h",
    "client/window_stacking_client.h",
    "client/window_types.h",
    "env.h",
    "env_input_state_controller.h",
    "env_observer.h",
    "event_injector.h",
    "input_state_lookup.h",
    "layout_manager.h",
    "null_window_targeter.h",
    "scoped_enable_unadjusted_mouse_events.h",
    "scoped_keyboard_hook.h",
    "scoped_simple_keyboard_hook.h",
    "scoped_window_capture_request.h",
    "scoped_window_event_targeting_blocker.h",
    "scoped_window_targeter.h",
    "window.h",
    "window_delegate.h",
    "window_event_dispatcher.h",
    "window_event_dispatcher_observer.h",
    "window_observer.h",
    "window_occlusion_change_builder.h",
    "window_occlusion_tracker.h",
    "window_targeter.h",
    "window_tracker.h",
    "window_tree_host.h",
    "window_tree_host_observer.h",
    "window_tree_host_platform.h",
  ]
  sources = [
    "aura_export.h",
    "client/aura_constants.cc",
    "client/capture_client.cc",
    "client/cursor_client.cc",
    "client/cursor_client_observer.cc",
    "client/default_capture_client.cc",
    "client/drag_drop_client.cc",
    "client/drag_drop_delegate.cc",
    "client/event_client.cc",
    "client/focus_change_observer.cc",
    "client/focus_client.cc",
    "client/screen_position_client.cc",
    "client/transient_window_client.cc",
    "client/visibility_client.cc",
    "client/window_parenting_client.cc",
    "client/window_stacking_client.cc",
    "env.cc",
    "env_input_state_controller.cc",
    "event_injector.cc",
    "input_state_lookup.cc",
    "layout_manager.cc",
    "native_window_occlusion_tracker.cc",
    "native_window_occlusion_tracker.h",
    "null_window_targeter.cc",
    "scoped_keyboard_hook.cc",
    "scoped_simple_keyboard_hook.cc",
    "scoped_window_capture_request.cc",
    "scoped_window_event_targeting_blocker.cc",
    "scoped_window_targeter.cc",
    "window.cc",
    "window_delegate.cc",
    "window_event_dispatcher.cc",
    "window_observer.cc",
    "window_occlusion_change_builder.cc",
    "window_occlusion_tracker.cc",
    "window_targeter.cc",
    "window_tracker.cc",
    "window_tree_host.cc",
    "window_tree_host_platform.cc",
  ]

  friend = [ ":*" ]

  defines = [ "AURA_IMPLEMENTATION" ]

  deps = [
    "//base",
    "//base:i18n",
    "//base/third_party/dynamic_annotations",
    "//build:chromeos_buildflags",
    "//cc",
    "//cc/mojo_embedder",
    "//components/discardable_memory/client",
    "//components/discardable_memory/public/mojom",
    "//components/viz/client",
    "//components/viz/common",
    "//components/viz/host",
    "//gpu/ipc/client",
    "//mojo/public/cpp/system",
    "//services/service_manager/public/cpp",
    "//skia",
    "//ui/base",
    "//ui/base/clipboard",
    "//ui/base/cursor/mojom:cursor_type",
    "//ui/base/ime/init",
    "//ui/display",
    "//ui/events",
    "//ui/events:dom_keyboard_layout",
    "//ui/events:events_base",
    "//ui/events/platform",
    "//ui/gfx",
    "//ui/gfx:gfx_switches",
    "//ui/gfx/geometry",
    "//ui/gl",
    "//ui/platform_window",
    "//ui/platform_window/stub",
  ]

  public_deps = [
    "//ui/base/cursor:cursor_base",
    "//ui/base/dragdrop/mojom:mojom_headers",
    "//ui/base/ime",
    "//ui/compositor",
  ]

  if (is_win) {
    public += [ "input_state_lookup_win.h" ]
    sources += [
      "input_state_lookup_win.cc",
      "native_window_occlusion_tracker_win.cc",
      "native_window_occlusion_tracker_win.h",
    ]
  }

  if (use_x11) {
    public_deps += [ "//ui/base/x" ]
    deps += [
      "//ui/events/platform/x11",
      "//ui/platform_window/x11",
    ]
  }

  if (is_win) {
    sources -= [ "input_state_lookup.cc" ]

    deps += [
      "//ipc",
      "//ui/base/cursor",
      "//ui/platform_window/win",
    ]
  }

  if (is_win) {
    libs = [
      "wtsapi32.lib",
      "dwmapi.lib",
    ]
  }

  if (use_ozone) {
    deps += [ "//ui/ozone" ]
    public += [ "screen_ozone.h" ]
    sources += [ "screen_ozone.cc" ]
  }

  configs += [ "//build/config/compiler:noshadowing" ]
}
